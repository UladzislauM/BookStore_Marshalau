package com.company.dao;

import com.company.dao.base.Book;
import com.company.dao.repositoty.BookDaoImpl;
import com.company.dao.controller.ControllerBook;
import com.company.dao.util.DataSource;

import java.time.LocalDate;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class App {


    public static void main(String[] args) throws Exception {
        try (DataSource dataSource = new DataSource()){
            Scanner in = new Scanner(System.in);
            ControllerBook controllerBook = new ControllerBook(new BookDaoImpl(dataSource));

            System.out.println("""
                 Commands:
                - all - show all books;
                - countallbooks - count All books;
                - get{ID} - detailed information about the book;
                - add - add book (autogenerated ID);
                - update{ID} - update book information (by Id);
                - delete{ID} - delete book;
                - getisbn{ISBN} - get Book by ISBN;
                - getauthor{aythor} - gety book(s) by author;
                - exit - exit;
                 Enter the command:
                """);
            boolean exit = true;
            while (exit) {
                String commandConsole = in.nextLine();
                if (!Pattern.matches("getauthor\\W\\w+\\W*\\w+\\W", commandConsole)){
                    commandConsole = commandConsole.toLowerCase();
                }

                if (commandConsole.matches("all")) {
                    controllerBook.getAllBooks();
                } else if (Pattern.matches("get\\W\\d*\\W", commandConsole)) {
                    Pattern patternGetId = Pattern.compile("\\d+");
                    Matcher matcher = patternGetId.matcher(commandConsole);
                    if (matcher.find()) {
                        controllerBook.getBookById(Long.parseLong(matcher.group()));
                    }
                } else if (Pattern.matches("add", commandConsole)) {
                    controllerBook.addBookById(addBookKeyBoard(in));
                } else if (Pattern.matches("update\\W\\d*\\W", commandConsole)) {
                    Book book = new Book();
                    Pattern patternUpdateId = Pattern.compile("\\d+");
                    Matcher matcher = patternUpdateId.matcher(commandConsole);
                    if (matcher.find()) {
                        controllerBook.updateBookById(addBookKeyBoard(in));
                    }
                } else if (Pattern.matches("delete\\W\\d*\\W", commandConsole)) {
                    Pattern patternDeleteId = Pattern.compile("\\d+");
                    Matcher matcher = patternDeleteId.matcher(commandConsole);
                    if (matcher.find()) {
                        controllerBook.deleteBookById(Long.parseLong(matcher.group()));
                    }
                } else if (commandConsole.matches("exit")) {
                    exit = false;
                } else if (Pattern.matches("getisbn\\W\\d*\\W", commandConsole)) {
                    Pattern patternGetByISBN = Pattern.compile("\\d+");
                    Matcher matcher = patternGetByISBN.matcher(commandConsole);
                    if (matcher.find()) {
                        controllerBook.getBookByISBN(matcher.group());
                    }
                } else if (Pattern.matches("getauthor\\W\\w+\\W*\\w+\\W", commandConsole)) {
                    Book book = new Book();
                    Pattern patternGetByAuthor = Pattern.compile("[{](.*?)[}]");
                    Matcher matcher = patternGetByAuthor.matcher(commandConsole);
                    if (matcher.find()) {
                        controllerBook.getBookByAuthor(matcher.group(1));
                    }
                } else if (commandConsole.matches("countallbooks")) {
                    controllerBook.countAllBooks();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            System.out.println("Thank you! GoodBye!");
        }

    }

    private static Book addBookKeyBoard(Scanner in) {
        Book book = new Book();
        System.out.println("Write Book Title:");
        book.setTitle(in.nextLine());
        System.out.println("Write Book NameAuthor:");
        book.setNameAuthor(in.nextLine());
        System.out.println("Write Book DatePurchase (yyyy-MM-dd format):");
        book.setDateReleaseBook(LocalDate.of(in.nextInt(), in.nextInt(), in.nextInt()));
        in.nextLine();
        System.out.println("Write BookStore status price: ");
        book.setStatus(in.nextLine());
        System.out.println("Write BookStore price: ");
        book.setPrice(in.nextBigDecimal());
        in.nextLine();
        System.out.println("Write BookStore ISBN: ");
        book.setIsbn(in.nextLine());
        return book;
    }
}



