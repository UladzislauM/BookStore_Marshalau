package com.company.dao.controller;

import com.company.dao.entity.RoleUser;
import com.company.dao.entity.User;
import com.company.dao.repositoty.UserDaoImpl;
import com.company.dao.service.UserService;
import com.company.dao.util.DataSourceElephant;
import com.company.dao.util.DataSourcePostgres;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class ControllerUsers {
    public void consoleInterface(Scanner in) {
        try (DataSourceElephant dataSourceElephant = new DataSourceElephant()) {
            UserService userService = new UserService(new UserDaoImpl(dataSourceElephant));

            System.out.println("""
                     Commands:
                    - all - show all users;
                    - countall - count All users;
                    - get {ID} - detailed information about the user;
                    - add - add user (autogenerated ID);
                    - update {ID} - update user information (by Id);
                    - delete {ID} - delete user;
                    - getemail - get user by email;
                    - exit - exit;
                     Enter the command:
                    """);


            boolean exit = true;
            while (exit) {
                String commandConsole = in.nextLine();
                String[] commandConsoleArr = commandConsole.split(" ");
                commandConsole = commandConsoleArr[0].toLowerCase();
                switch (commandConsole) {
                    case "all":
                        List<User> users = userService.getAllUsers();
                        System.out.println("AllUsers (abbreviated representation): ");
                        for (int i = 0; i < users.size(); i++) {
                            System.out.printf("ID: %d, UserName: %s, LastName: %s, email: %s, role: %s\n",
                                    users.get(i).getId(), users.get(i).getName(), users.get(i).getLast_name(),
                                    users.get(i).getEmail(), users.get(i).getRole());
                        }
                        break;
                    case "get":
                        System.out.println("User by number : ".concat(commandConsoleArr[1]).concat(" : ")
                                .concat(userService.getUserById(Long.parseLong(commandConsoleArr[1])).toString()));
                        break;
                    case "add":
                        System.out.println("New Book: ");
                        System.out.println(userService.createUser(addUserKeyBoard(in)));
                        break;
                    case "update":
                        System.out.println("User Updated : " + userService.updateUserById(addUserKeyBoard(in)));
                        break;
                    case "delete":
                        userService.deleteUserById(Long.parseLong(commandConsoleArr[1]));
                        System.out.println("User Deleted : ".concat(commandConsoleArr[1]));
                        break;
                    case "getemail":
                        System.out.println("User by email : ".concat(commandConsoleArr[1]).concat(" : ")
                                .concat(userService.getUserByEmail(commandConsoleArr[1]).toString()));
                        break;
                    case "getlname":
                        System.out.println("User by Last Name : ".concat(commandConsoleArr[1]).concat(" : "));
                        userService.getUsersByLastName(commandConsoleArr[1])
                                .forEach(System.out::println);
                        break;
                    case "countall":
                        System.out.println("Count All books: ".concat(userService.countAllUsers().toString()));
                        break;
                    case "exit":
                        exit = false;
                        break;
                }
            }
        } catch (
                Exception e) {
            e.printStackTrace();
        } finally {
            System.out.println("Thank you! GoodBye!");
        }
    }

    private User addUserKeyBoard(Scanner in) {
        User user = new User();
        System.out.println("Write UserName:");
        user.setName(in.nextLine());
        System.out.println("Write UserLastName:");
        user.setLast_name(in.nextLine());
        System.out.println("Write UserEmail:");
        user.setEmail(in.nextLine());
        System.out.println("Write UserPassword: ");
        user.setPassword(in.nextLine());
        System.out.println("Write UserRole (ADMIN, MANAGER, USER):");
        String roleStr = in.nextLine();
        while (!isValidRole(roleStr)) {
            System.out.println("Status not find");
            roleStr = in.nextLine();
        }
        user.setRole(RoleUser.valueOf(roleStr));
        return user;
    }

    public boolean isValidRole(String role) {
        return Arrays.stream(RoleUser.values())
                .anyMatch(e -> e.toString().equals(role));
    }
}
